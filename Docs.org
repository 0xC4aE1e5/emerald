* Documentation
Emerald is a small programming language that is designed to be easy to learn and use.
It's set of functions is growing very fast and it's a work in progress.
But it's also a very good language to learn and use.
** The Hello World program
The first program you should write is the Hello World program. It's a very simple program that prints the text "Hello World" on the screen.
To first use it, you need to install the Emerald interpreter.
Usually, you just need to run =pfw.rb= and then type =ruby windows.rb= if you're on Windows and have Ruby installed. This patches Emerald to work with the Ruby language and not Crystal.
If you're on Linux, you just have to type =make emerald= if you have the Crystal compiler installed.
Then, run Emerald by typing =ruby windows.rb= if you're on Windows and =./emerald= on Linux. You should see something like this:
#+BEGIN_SRC
Emerald REPL
=>
#+END_SRC
What you need to do is press Ctrl+C. Now create a file called =hworld.em= and write the following code:
#+BEGIN_SRC emerald
print Hello World
#+END_SRC
Then, in the command to run, run the command, but append =hworld.em= to the end of the command. You should see =Hello World=. You can swap =Hello World= with something else.
** Adding numbers
To add numbers, you use the add function. To do that, run this code to add 5+2:
#+BEGIN_SRC emerald
add 5 2
#+END_SRC
Notice that it didn't output anything. To output the result, run this:
#+BEGIN_SRC emerald
add 5 2
usevariable add print @
#+END_SRC
Essentially, it's saying to the computer:

#+BEGIN_QUOTE
Add 5+2, and store that into a variable called =add=.

Now, get =add='s contents and print it out.
#+END_QUOTE

We will talk more about =usevariable=.
** Subtracting/Multiplying/Dividing
The syntax is exactly the same as =add=, but use the correct operator. Here is a little chart:

=subtract= for subtracting

=multiply= for multiplying

=divide= for dividing

Also, the variable name to use is the exact same as the operator.
** User input
One thing about interactive CLI programs is that they use input functions. Be it a Python app, Java app, or even an Emerald app.
The syntax for the input function is actually the same as Python's. Here is an example of =input=:
#+BEGIN_SRC emerald
input What's your name?
usevariable input print Howdy, @
#+END_SRC
Note that functions that are supposed to return things, actually create a variable. This is normal.
** If statements
One of the trickiest things in programming, are if statements. In Emerald, =if= is easy. Here are some examples:
#+BEGIN_SRC emerald
 Does not output anything
if Howdy is Hello print Something's wrong... 
 Says it's incorrect
if Howdy is Hello print Something's wrong... else print Yup. That's incorrect.
 Says something's wrong
if Howdy not Hello print Something's wrong... else print Yup. That's incorrect.
#+END_SRC
Here are some templates:

If statement, is, w/o else:
#+BEGIN_SRC emerald
if <Candidate 1> is <Candidate 2> <Code to run>
#+END_SRC
If statement, not, w/o else:
#+BEGIN_SRC emerald
if <Candidate 1> not <Candidate 2> <Code to run>
#+END_SRC
If statement, is, with else:
#+BEGIN_SRC emerald
if <Candidate 1> is <Candidate 2> <Code to run> else <Code to run for else>
#+END_SRC
If statement, not, with else:
#+BEGIN_SRC emerald
if <Candidate 1> not <Candidate 2> <Code to run> else <Code to run for else>
#+END_SRC
** Infinite loops
Some programs might need infinite loops. They use them to say, hang for a hosted runner to not stop. Again, the syntax is really simple:
#+BEGIN_SRC emerald
loop <The code you want to loop>
#+END_SRC
Here's an example that prints =Emerald= forever:
#+BEGIN_SRC emerald
loop print Emerald
#+END_SRC
** Variables
*** =variable=
The syntax for =variable= is simple. Here's an example of using it:
#+BEGIN_SRC emerald
variable x No adult stuff please.
#+END_SRC
*** =usevariable=
Again, the syntax for =usevariable= is simple. Note that you use an =@= in place of the variable's contents. Here's how you use it:
#+BEGIN_SRC emerald
variable a HTML Anchor Tag?
usevariable a What is a @
#+END_SRC
*** Functions
To create functions, you do it like this:
#+BEGIN_SRC
variable print_hworld_on_sep_lines print Hello;print World
usevariable print_hworld_on_sep_lines @
#+END_SRC
You don't have to have a semi-colon; it's only for functions with multiple lines.
** System calls
Running system calls is very straight forward, and has the same syntax as Ruby. Here's how you use it:
#+BEGIN_SRC emerald
system echo I'm outside Emerald...
#+END_SRC
* You did it!
